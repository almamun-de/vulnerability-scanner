
import socket
import requests
import nmap
import ssl

# Target domain or IP
target = "example.com"  # Replace with your target

# Open ports scanning
def scan_ports(target):
    nm = nmap.PortScanner()
    nm.scan(target, '1-1024')  # Scans common ports
    for host in nm.all_hosts():
        print(f"\nOpen ports for {host}:")
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                print(f"Port {port}: {nm[host][proto][port]['state']}")

# HTTP security headers check
def check_security_headers(target):
    url = f"http://{target}"
    try:
        response = requests.get(url)
        headers = response.headers
        print("\nSecurity headers check:")
        
        security_headers = ['Content-Security-Policy', 'X-Content-Type-Options', 
                            'X-Frame-Options', 'Strict-Transport-Security', 'X-XSS-Protection']

        for header in security_headers:
            if header in headers:
                print(f"{header}: {headers[header]}")
            else:
                print(f"{header}: Missing")
    except Exception as e:
        print(f"Error checking security headers: {e}")

# SSL/TLS security check
def check_ssl(target):
    try:
        print("\nSSL/TLS check:")
        ctx = ssl.create_default_context()
        conn = ctx.wrap_socket(socket.socket(socket.AF_INET), server_hostname=target)
        conn.connect((target, 443))
        cert = conn.getpeercert()
        
        subject = dict(x[0] for x in cert['subject'])
        issuer = dict(x[0] for x in cert['issuer'])
        print(f"Issued to: {subject['commonName']}")
        print(f"Issued by: {issuer['commonName']}")
        print(f"Valid from: {cert['notBefore']}")
        print(f"Valid until: {cert['notAfter']}")
        
        conn.close()
    except Exception as e:
        print(f"Error checking SSL/TLS: {e}")

if __name__ == "__main__":
    print(f"Starting vulnerability scan on {target}")
    
    # Port scanning
    scan_ports(target)
    
    # Security headers check
    check_security_headers(target)
    
    # SSL/TLS security check
    check_ssl(target)
